swagger: '2.0'
info:
    description: 'This is a microservice for accepting and aggregating cryptocurrency orders from our HCM clients to reduce transactional overhead on Payroll.'
    version: 1.0.0
    title: 'NU-Payroll cryptopayments'
    contact:
        email: mark_davis@ultimatesoftware.com
    license:
        name: 'All rights reserved by Mark Davis except where overridden by the rights of Ultimate Software'
host: localhost:8080
basePath: /v2
tags:
    -
        name: admin
        description: 'These endpoints should not be called except by a cron-job or US administrator'
        externalDocs:
            description: 'Find out more'
            url: 'http://swagger.io'
    -
        name: x-tenant
        description: 'These commands could originate upstream from a corporate client and represent orders for cryptocurrency to be sent to an address.'
schemes:
    - https
    - http
paths:
    /queue:
        get:
            tags: [admin]
            responses: {'200': {description: 'Valid'}, '401': {description: 'Unauthorized'}}
            summary: 'Returns a list of all orders that will execute on the next payment cycle'
            operationId: returnOrders
            consumes: [application/json]
            produces: [application/json]
            parameters: [{in: header, type: string, name: Content-Type, description: 'application/json', required: true}]
            #security: [{payroll_auth: ['read:admin']}]

    /balance:
        get:
            tags: [admin]
            summary: 'Return the USD commitment for this cryptocurrency, or the total USD commitment (sum of three)'
            operationId: calculateOwed
            consumes: [application/json]
            produces: [application/json]
            parameters: [{in: header, type: string, name: Content-Type, description: 'application/json', required: true}, {in: header, type: string, name: currency, enum: [USD, BTC, LTC, ETH], description: 'Three character currency code', required: true}]
            responses: {'200': {description: 'Valid'}, '401': {description: 'Unauthorized'}}
            #security: [{payroll_auth: ['read:admin']}]

    /execute:
        post:
            tags: [admin]
            summary: 'Execute all orders and log results'
            consumes: [application/json]
            produces: [application/json]
            parameters: [{in: header, type: string, name: Content-Type, description: 'application/json', required: true}, {in: header, name: code, description: 'confirm code', required: true, type: string}]
            operationId: executePayments
            responses: {'200': {description: 'Valid'}, '401': {description: 'Unauthorized'}, '400': {description: 'Invalid Body'}}
            #security: [{payroll_auth: ['spend:admin']}]

    /recurring:
        post:
            tags: [x-tenant]
            operationId: addRecurring
            consumes: [application/json]
            produces: [application/json]
            parameters: [{in: header, type: string, name: Content-Type, description: 'application/json', required: true}, {in: body, name: body, description: 'New recurring order', required: true, schema: {$ref: '#/definitions/RecurringOrder'}}]
            responses: {'200': {description: 'Valid'}, '401': {description: 'Unauthorized'}, '400': {description: 'Invalid Body'}}
            #security: [{payroll_auth: ['place:orders']}]
    /recurring/{target}:
        put:
            tags: [x-tenant]
            summary: 'Update details about an existing recurring order'
            parameters: [{in: header, type: string, name: Content-Type, description: 'application/json', required: true}, {in: body, name: body, description: 'Update to recurring order', required: true, schema: {$ref: '#/definitions/RecurringOrder'}}, {in: path, name: target, description: 'The UUID of the recurring order to replace', required: true, type: string}, {in: header, name: code, description: 'The currency to override (USD: all)', type: string, enum: [USD, BTC, ETH, LTC]}]
            operationId: updateRecurring
            consumes: [application/json]
            produces: [application/json]
            responses: {'200': {description: 'Valid'}, '401': {description: 'Unauthorized'}, '400': {description: 'Invalid Body'}, '404': {description: 'Target not found'}}
            #security: [{payroll_auth: ['place:orders']}]
        delete:
            tags: [x-tenant]
            summary: 'Stops a recurring order from the next and all future cycles'
            parameters: [{in: header, type: string, name: Content-Type, description: 'application/json', required: true}, {in: path, name: target, description: 'The recurring order to remove', required: true, type: string}, {in: header, name: code, description: 'The currency to remove (USD: all)', type: string, enum: [USD, BTC, ETH, LTC]}]
            operationId: deleteRecurring
            consumes: [application/json]
            produces: [application/json]
            responses: {'200': {description: 'Valid'}, '401': {description: 'Unauthorized'}, '404': {description: 'Target not found'}}
            #security: [{payroll_auth: ['place:orders']}]
        get:
            tags: [x-tenant]
            summary: 'Retrieve details about a specific recurring order'
            parameters: [{in: header, type: string, name: Content-Type, description: 'application/json', required: true}, {in: path, name: target, description: 'ID of order to get (Will return for any/all currencies)', required: true, type: string}]
            operationId: retrieveRecurring
            consumes: [application/json]
            produces: [application/json]
            responses: {'200': {description: 'Valid'}, '401': {description: 'Unauthorized'}, '404': {description: 'Target not found'}}
            #security: [{payroll_auth: ['place:orders']}]
    /bonus:
        post:
            tags: [x-tenant]
            summary: 'Add a one-time order to be executed in the next cycle'
            operationId: addBonus
            parameters: [{in: header, type: string, name: Content-Type, description: 'application/json', required: true}, {in: body, name: body, description: 'One-time order', required: true, schema: {$ref: '#/definitions/Order'}}]
            consumes: [application/json]
            produces: [application/json]
            responses: {'200': {description: 'Valid'}, '401': {description: 'Unauthorized'}, '400': {description: 'Invalid Body'}}
            #security: [{payroll_auth: ['place:orders']}]
securityDefinitions:
    api_key:
        type: apiKey
        name: api_key
        in: header
    #payroll_auth:
    #    type: oauth2
    #    authorizationUrl: 'https://todo/oauth/dialog'
    #    flow: implicit
    #    scopes:
    #        'place:orders': 'Add orders to our queue'
    #        'read:admin': 'Read important data about our customers'
    #        'spend:admin': 'Execute a bunch of GDAX transactions, spending money'

definitions:
    RecurringOrder:
        type: object
        required:
            - quantity
            - destination
            - currency
            - destinationType
            - cyclePeriod
            - cyclesSinceLast
        properties:
            id: {type: string, format: uuid, description: 'Overwritten by server'}
            currency: {type: string, description: 'Three-digit trade code', enum: [BTC, ETH, LTC]}
            quantity: {type: integer, format: int32, description: 'Amount of currency to send'}
            destination: {type: string}
            destinationType: {type: string, enum: [coinbase, wallet]}
            filled: {type: boolean, description: 'Overwritten by server'}
            recurring: {type: boolean, description: 'boolean check if the order is recurring'}
            cyclePeriod: {type: integer, format: int32, description: 'Send this recurring order every N pay cycles', default: 1}
            cyclesSinceLast: {type: integer, format: int32, description: 'Once this = cyclePeriod-1, we send on the next cycle.', default: 0}
        description: "Be sure to clear the inherited filled field after every trigger"
        xml:
            name: RecurringOrder
    Order:
        type: object
        required:
            - currency
            - quantity
            - destination
            - destinationType
        properties:
            id: {type: string, format: uuid, description: 'Overwritten by server'}
            currency: {type: string, description: 'Three-digit trade code', enum: [BTC, ETH, LTC]}
            quantity: {type: number, format: double, description: 'Amount of currency to purchase for client in USD.'}
            destination: {type: string}
            destinationType: {type: string, enum: [coinbase, wallet]}
            filled: {type: boolean, description: 'Overwritten by server'}
        xml:
            name: Order
    ApiResponse:
        type: object
        properties:
            code: {type: integer, format: int32}
            type: {type: string}
            message: {type: string}
    OrderConfirmation:
        type: object
        properties:
            code: {type: integer, format: int32}
            type: {type: string}
            message: {type: string}
            order: {$ref: '#/definitions/Order'}
    RecurringConfirmation:
        type: object
        properties:
            code: {type: integer, format: int32}
            type: {type: string}
            message: {type: string}
            order: {$ref: '#/definitions/RecurringOrder'}
externalDocs:
    description: 'Find out more about Swagger'
    url: 'http://swagger.io'